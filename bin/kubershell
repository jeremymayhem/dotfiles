#!/bin/bash 

# trap "exit" INT TERM ERR SIGINT
# trap "killall background" EXIT
# trap "trap - SIGTERM && kill -- -$$" SIGINT SIGTERM EXIT

set -e

CONFIG_PATH=/tmp/kubershell-$RANDOM

FORWARD_PORT=50000

CONTROL_SOCKET=$CONFIG_PATH/socket
export CLUSTER_SERVER=$1

function tunnel() {
  mkdir -p $CONFIG_PATH
  ssh -M -S $CONTROL_SOCKET -fnNT -o ExitOnForwardFailure=yes -L 50000:localhost:6443 $CLUSTER_SERVER || exit 1

  scp -qr $CLUSTER_SERVER:.kube/config $CONFIG_PATH 2>/dev/null

  if [[ ! -f $CONFIG_PATH/config ]]; then
    echo "ERROR: Unable to retrieve kubeconfig from $CLUSTER_SERVER"
  fi
  yq e ".clusters[0].cluster.server = \"https://localhost:$FORWARD_PORT\"" -i $CONFIG_PATH/config
  yq e ".clusters[0].name = \"$CLUSTER_SERVER\"" -i $CONFIG_PATH/config
  yq e ".contexts[0].context.cluster = \"$CLUSTER_SERVER\"" -i $CONFIG_PATH/config
  yq e ".contexts[0].name = \"$CLUSTER_SERVER\"" -i $CONFIG_PATH/config
  yq e ".current-context = \"$CLUSTER_SERVER\"" -i $CONFIG_PATH/config
}

function cleanup() {
  if [[ -S $CONTROL_SOCKET ]]; then
    echo "Terminating port forwarding for $CLUSTER_SERVER"
    ssh -S $CONTROL_SOCKET -O exit $CLUSTER_SERVER
    rm -rf $CONTROL_SOCKET
    rm -rf $CONFIG_PATH
    echo "Exiting kubershell"
  fi
}

trap "cleanup" SIGINT SIGTERM EXIT ERR INT TERM

tunnel

export KUBECONFIG=$CONFIG_PATH/config

cat << EOF > $CONFIG_PATH/bashrc
[[ -f \$HOME/.bashrc ]] && . \$HOME/.bashrc
command -v kubectl >/dev/null && alias k=kubectl
command -v kubecolor >/dev/null && alias kubectl=kubecolor
if [[ -f /usr/local/opt/kube-ps1/share/kube-ps1.sh ]]; then
  export KUBE_PS1_SYMBOL_USE_IMG=true
  export KUBE_PS1_PREFIX=""
  export KUBE_PS1_SUFFIX=" - "
  export KUBE_PS1_SYMBOL_COLOR="yellow"
  source /usr/local/opt/kube-ps1/share/kube-ps1.sh
  PS1='k8s \$(kube_ps1)'\$PS1
fi
echo "kubershell initiated for \$CLUSTER_SERVER"
EOF

bash --rcfile $CONFIG_PATH/bashrc -i
